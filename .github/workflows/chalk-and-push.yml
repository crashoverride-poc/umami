name: Build chalked image

on:
  workflow_dispatch:
    inputs:
      push:
        description: Should the images be pushed
        default: true
        required: false
        type: boolean
      version:
        description: The version used when tagging the image
        default: "dev"
        required: false
        type: string
      commit:
        description: Commit SHA or branch/tag to checkout (leave empty for default)
        default: ""
        required: false
        type: string
      branch:
        description: Branch to checkout (defaults to current branch)
        default: ""
        required: false
        type: string

jobs:
  build_and_push_images:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write

    env:
      RELEASE_VERSION: "${{ github.event.release.tag_name }}"

    strategy:
      fail-fast: false
      matrix:
        file_tag:
          - file: ./Dockerfile
            tag_suffix: umami
            context: ./
            platforms: linux/amd64

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.commit || inputs.branch || github.ref }}

      - name: Setup Chalk
        uses: crashappsec/setup-chalk-action@main
        with:
          connect: true

      - name: Load environment variables from .env file
        run: |
          if [ -f .env ]; then
            # Filter out comments and empty lines, then add each variable to $GITHUB_ENV
            grep -vE '^\s*#|^\s*$' .env | while read -r line; do
              echo "$line" >> $GITHUB_ENV
            done
          fi

      - name: Check for changes and set push options
        id: check_changes
        run: |
          DOCKERFILE_DIR=$(dirname ${{ matrix.file_tag.file }})

          # If a specific commit is provided, always build (no change detection)
          if [ -n "${{ inputs.commit }}" ]; then
            echo "Specific commit requested, proceeding with build."
            echo "skip=false" >> "$GITHUB_OUTPUT"
          else
            # Check if this is triggered by sync-upstream
            if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.branch }}" = "upstream" ]; then
              # For upstream syncs, always build
              echo "Upstream sync detected, proceeding with build."
              echo "skip=false" >> "$GITHUB_OUTPUT"
            else
              # Original change detection logic for manual runs
              FORCE_PUSH=${{ inputs.push }}
              if [ "$FORCE_PUSH" = true ]; then
                echo "Force push is enabled, proceeding with build."
                echo "skip=false" >> "$GITHUB_OUTPUT"
              else
                echo "Skipping build for ${{ matrix.file_tag.tag_suffix }} - manual trigger without force push"
                echo "skip=true" >> "$GITHUB_OUTPUT"
              fi
            fi
          fi

      - name: Assume AWS Role
        if: steps.check_changes.outputs.skip == 'false'
        id: role
        uses: aws-actions/configure-aws-credentials@5fd3084fc36e372ff1fff382a39b10d03659f355 #v2
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GithubDeploy

      - name: Login to Amazon ECR
        if: steps.check_changes.outputs.skip == 'false'
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 #v2.0.1
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Set up QEMU
        if: steps.check_changes.outputs.skip == 'false'
        uses: docker/setup-qemu-action@v3
        with:
          image: tonistiigi/binfmt:master

      - name: Set up Docker Buildx
        if: steps.check_changes.outputs.skip == 'false'
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config-inline: |
            [worker.oci]
            max-parallelism = 2

      - name: Build and push umami images
        if: steps.check_changes.outputs.skip == 'false'
        uses: docker/build-push-action@v6.15.0
        with:
          context: ${{ matrix.file_tag.context }}
          file: ${{ matrix.file_tag.file }}
          platforms: ${{ matrix.file_tag.platforms }}
          push: ${{ inputs.push }}
          sbom: true
          provenance: true
          tags: |
            ${{ secrets.AWS_ECR_PREFIX }}/umami/${{matrix.file_tag.tag_suffix }}:${{ inputs.version }}
            ${{ secrets.AWS_ECR_PREFIX }}/umami/${{matrix.file_tag.tag_suffix }}:latest
          cache-from: type=registry,ref=${{ secrets.AWS_ECR_PREFIX }}/umami/${{matrix.file_tag.tag_suffix}}:buildcache
          cache-to: type=registry,ref=${{ secrets.AWS_ECR_PREFIX }}/umami/${{matrix.file_tag.tag_suffix}}:buildcache,mode=max,image-manifest=true,oci-mediatypes=true

